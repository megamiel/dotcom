<div class="sentence" id="kaisetsu"><b>再帰</b>とは、実行中に自分自身を呼び出すことをいい、再帰呼出しを行っても正しい結果を返すことができる性質をもつプログラムを「再帰的プログラム」といいます。<br/><br/>少し長くなりますが、再帰関数の動作を理解するために例を挙げて説明します。例えば、nの階乗を再帰的に計算する関数F(n)が次のように定義されていたとします。(nは非負の整数です)<br/><br/>　n＞0のとき、F(n)＝n×F(n－1)<br/>　n＝0のとき、F(n)＝1<br/><br/>階乗とは、1からある自然数nまでの相乗のことをいい、n の階乗は記号 ! を使って「n!」と表記されます。例えば 3! であれば、<br/><br/>　　3×2×1＝6<br/><br/>というように計算します。<br/><br/>関数F(n)を用いて 3! を計算すると、以下のように実行途中で自分自身の呼び出しを伴います。<br/><div class="pre">F(3)＝3×F(3－1)<br/>　<em class="g">//自分自身 F(2)を呼び出す</em><br/>　F(2)＝2×F(2－1)<br/>　　<em class="g">//F(1)を呼び出す</em><br/>　　F(1)＝1×F(1－1)<br/>　　　<em class="g">//F(0)を呼び出す</em><br/>　　　F(0)＝1<br/>　　<em class="g">//F(1)の処理に戻る</em><br/>　　F(1)＝1×1＝1<br/>　<em class="g">//F(2)の処理に戻る</em><br/>　F(2)＝2×1＝2<br/><em class="g">//F(3)の処理に戻る</em><br/>F(3)＝3×2＝6</div>上記のように再帰的な処理では、ある関数の処理中に同じ関数（自分自身）を呼び出し、呼び出した関数の処理が終わると呼出し元の処理に戻ります。このような手順で処理されるため、最終的に正しい結果を得るためには、自分自身を呼び出した時点での呼出し元側の途中経過を記憶しておかなければなりません。再帰的な処理では、実行中に自分自身が呼び出された場合にそこまでの実行途中の状態を、スタックと呼ばれるデータ構造に格納しておきます。<div class="img_margin"><img alt="08_1.gif" src="https://www.ap-siken.com/kakomon/30_haru/img/08_1.gif"/></div><br/>そして、n＝0のときにF(0)が1を返し、呼出し元の処理に戻っていく過程では、最後に積み上げたものから順にF(1)、F(2)、F(3)と値が返ってきて計算されます。<br/><div class="img_margin"><img alt="08_2.gif" src="https://www.ap-siken.com/kakomon/30_haru/img/08_2.gif"/></div>上記のように、再帰的な処理では A<sub>1</sub>→A<sub>2</sub>→A<sub>3</sub> の順でプログラムを呼び出した場合、A<sub>3</sub>→A<sub>2</sub>→A<sub>1</sub> というように<em class="m">後から入れたものから順に</em>その値を使用します。つまり再帰的な処理は、LIFO（Last-In First-Out，後入れ先出し）の記憶管理方式を用いて実現されています。<br/><br/>したがって正解は「ウ」です。</div>